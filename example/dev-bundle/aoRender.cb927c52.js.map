{"mappings":"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","sources":["node_modules/three/examples/jsm/utils/BufferGeometryUtils.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.count * itemSize;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst tupleOffset = offset / itemSize;\n\t\t\tfor ( let j = 0, l = attribute.count; j < l; j ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tconst value = attribute.getComponent( j, c );\n\t\t\t\t\tresult.setComponent( j + tupleOffset, c, value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tarray.set( attribute.array, offset );\n\n\t\t}\n\n\t\toffset += attribute.count * itemSize;\n\n\t}\n\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferAttribute}\n * @return {BufferAttribute}\n */\nexport function deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// returns a new, non-interleaved version of the provided attribute\nexport function deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n// deinterleaves all attributes on the geometry\nexport function deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new BufferAttribute(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\tif ( morphAttr ) {\n\n\t\t\ttmpMorphAttributes[ name ] = new BufferAttribute(\n\t\t\t\tnew morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize ),\n\t\t\t\tmorphAttr.itemSize,\n\t\t\t\tmorphAttr.normalized\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newarray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewarray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new BufferAttribute(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new BufferAttribute(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry\n * @param {number} [creaseAngle]\n * @return {BufferGeometry}\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n"],"names":[],"version":3,"file":"aoRender.cb927c52.js.map","sourceRoot":"/__parcel_source_root/"}